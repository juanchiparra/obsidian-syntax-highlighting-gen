---
import { styles } from "../syntax-highlighting.ts";
const defaultColors: { [key: string]: string } = styles["Monokai Sublime"];
const keys = [
    "background",
    "normal",
    "comment",
    "function",
    "important",
    "keyword",
    "operator",
    "property",
    "punctuation",
    "string",
    "tag",
    "value",
    "boolean",
    "console",
    "selector",
];
---

<section class="container">
    <form id="color-form">
        <div class="select">
            <label for="color-select">Syntax Highlighting</label>
            <select id="color-select" data-styles={JSON.stringify(styles)}>
                {
                    Object.keys(styles)
                        .sort((a, b) => a.localeCompare(b))
                        .map((name) => (
                            <option
                                value={name}
                                selected={name === "Monokai Sublime"}
                            >
                                {name}
                            </option>
                        ))
                }
            </select>
        </div>
        <div class="color-grid">
            {
                keys
                    .filter((key) => defaultColors[key] !== undefined)
                    .map((key) => (
                        <label class="color-label">
                            <button
                                type="button"
                                class="block-btn"
                                data-key={key}
                                aria-label="Block color"
                            >
                                <span class="block-icon" data-key={key} />
                            </button>
                            <span>{key}</span>
                            <input
                                type="color"
                                name={key}
                                value={
                                    defaultColors[
                                        key as keyof typeof defaultColors
                                    ] ?? "#cccccc"
                                }
                            />
                        </label>
                    ))
            }
        </div>
        <button id="copy" type="button" class="button" aria-label="Copy CSS">
            Copy CSS
        </button>
        <button
            id="random"
            type="button"
            class="button"
            aria-label="Random colors"
        >
            Random colors
        </button>
    </form>

    <div class="preview">
        <h3>Python</h3>
        <div id="code-preview">
            <pre>
<span class="token normal">x</span> <span class="token operator">=</span> <span class="token value">10</span>
<br />
<span class="token keyword">if</span> <span class="token normal">x</span> <span class="token operator">&gt;</span> <span class="token value">5</span><span class="token punctuation">:</span>
<br />&nbsp;&nbsp;<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x is greater than 5"</span><span class="token punctuation">)</span>
<br />&nbsp;&nbsp;<span class="token keyword">if</span> <span class="token normal">x</span> <span class="token operator">%</span> <span class="token value">2</span> <span class="token operator">==</span> <span class="token value">0</span><span class="token punctuation">:</span>
<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x is even"</span><span class="token punctuation">)</span> <span class="token comment"># Nested code block</span>
<br /><span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token normal">x</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<br />&nbsp;&nbsp;<span class="token keyword">return</span>
            </pre>
        </div>
        <h3>JavaScript</h3>
        <div id="code-preview-js">
            <pre>
<span class="token keyword">function</span> <span class="token function">helloWorld</span>() {'{'
}
<br />&nbsp;&nbsp;<span class="token console">console</span><span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">'hi!'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<br />{'}'}
            </pre>
        </div>
        <h3>CSS</h3>
        <div id="code-preview-css">
            <pre>
<span class="token selector">.box</span> <span class="token punctuation">{'{'}</span>
<br />&nbsp;&nbsp;<span class="token property">text-align</span><span class="token punctuation">:</span> <span class="token normal">center</span><span class="token punctuation">;</span>
<br />&nbsp;&nbsp;<span class="token property">width</span><span class="token punctuation">:</span> <span class="token value">100</span>%<span class="token punctuation">;</span>
<br />&nbsp;&nbsp;<span class="token property">color</span><span class="token punctuation">:</span> <span class="token normal">#00FF00</span> <span class="token important">!important</span><span class="token punctuation">;</span>
<br /><span class="token punctuation">{'}'}</span>
            </pre>
        </div>
    </div>
</section>

<script type="module" is:inline>
    const styleSelect = document.getElementById("color-select");
    const styles = JSON.parse(styleSelect.getAttribute("data-styles"));
    const keys = [
        "background",
        "normal",
        "comment",
        "function",
        "important",
        "keyword",
        "operator",
        "property",
        "punctuation",
        "string",
        "tag",
        "value",
        "boolean",
        "console",
        "selector",
    ];

    const form = document.getElementById("color-form");
    const copy = document.getElementById("copy");
    const random = document.getElementById("random");
    const colors = { ...styles["Monokai Sublime"] };
    let currentStyle = "Monokai Sublime";

    const block = {};
    keys.forEach((key) => (block[key] = false));

    function getBlock(locked) {
        return locked
            ? `<svg width="18" height="18" viewBox="0 0 20 20" fill="none" style="display:block" xmlns="http://www.w3.org/2000/svg">
            <rect x="4" y="8" width="12" height="8" rx="2" stroke="#888" stroke-width="1.5" fill="none"/>
            <path d="M7 8V6a3 3 0 1 1 6 0v2" stroke="#888" stroke-width="1.5" fill="none"/>
        </svg>`
            : `<svg width="18" height="18" viewBox="0 0 20 20" fill="none" style="display:block" xmlns="http://www.w3.org/2000/svg">
            <rect x="4" y="8" width="12" height="8" rx="2" stroke="#bbb" stroke-width="1.5" fill="none"/>
            <path d="M7 8V6a3 3 0 1 1 6 0" stroke="#bbb" stroke-width="1.5" fill="none"/>
        </svg>`;
    }

    function updateBlock() {
        keys.forEach((key) => {
            const icon = form.querySelector(`.block-icon[data-key="${key}"]`);
            if (icon) icon.innerHTML = getBlock(block[key]);
        });
    }

    form.addEventListener("click", (e) => {
        const btn = e.target.closest(".block-btn");
        if (btn) {
            const key = btn.getAttribute("data-key");
            block[key] = !block[key];
            updateBlock();
            e.preventDefault();
            e.stopPropagation();
        }
    });

    function updateCSS(colors) {
        const roots = document.querySelectorAll(".preview pre");
        const cssMap = {
            background: "--code-background",
            normal: "--code-normal",
            comment: "--code-comment",
            function: "--code-function",
            important: "--code-important",
            keyword: "--code-keyword",
            operator: "--code-operator",
            property: "--code-property",
            punctuation: "--code-punctuation",
            string: "--code-string",
            tag: "--code-tag",
            selector: "--code-selector",
            value: "--code-value",
            boolean: "--code-boolean",
            console: "--code-console",
        };
        roots.forEach((root) => {
            Object.entries(cssMap).forEach(([key, cssVar]) => {
                root.style.setProperty(cssVar, colors[key] ?? colors.normal);
            });
        });
    }

    function generateCSS(colors, styleName) {
        return `
body {
${keys.map((key) => `    --code-${key}: ${colors[key] ?? "#cccccc"};`).join("\n")}
    --code-white-space: nowrap;
    --code-size: 13px;
}

.markdown-preview-view .token.hexcode.color {
    color: ${colors.string};
}
.markdown-preview-view .token.selector {
    color: ${colors.selector ?? colors.tag ?? colors.keyword};
}
.markdown-preview-view .token.console {
    color: ${colors.console ?? colors.normal};
}
`;
    }

    function updateColor() {
        keys.forEach((key) => {
            const input = form.querySelector(`input[name="${key}"]`);
            if (input) input.value = colors[key] ?? "#cccccc";
        });
    }

    function randomColor() {
        return `#${Math.floor(Math.random() * 16777215)
            .toString(16)
            .padStart(6, "0")}`;
    }

    function luminance(hex) {
        const rgb = hex
            .replace("#", "")
            .match(/.{2}/g)
            .map((x) => parseInt(x, 16) / 255);
        return rgb
            .map((c) =>
                c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4)
            )
            .reduce((a, c, i) => a + c * [0.2126, 0.7152, 0.0722][i], 0);
    }

    function contrast(hex1, hex2) {
        const l1 = luminance(hex1);
        const l2 = luminance(hex2);
        return (Math.max(l1, l2) + 0.05) / (Math.min(l1, l2) + 0.05);
    }

    function randomBackground(type = "dark") {
        const darks = [
            "#23241f",
            "#282a36",
            "#1e1e1e",
            "#22212c",
            "#212121",
            "#181818",
            "#2d2d2d",
            "#24292e",
            "#0d1117",
        ];
        const lights = [
            "#f5f5f5",
            "#fafafa",
            "#ffffff",
            "#f7f7f7",
            "#ececec",
            "#eaeaea",
            "#e0e0e0",
            "#f8f8f2",
        ];
        const targetPalette = type === "light" ? lights : darks;
        return targetPalette[Math.floor(Math.random() * targetPalette.length)];
    }

    function getBackground(hex) {
        return luminance(hex) < 0.5 ? "dark" : "light";
    }

    function getContrastColor(bg, minContrast = 4.5) {
        let color;
        let tries = 0;
        do {
            color = randomColor();
            tries++;
            if (tries > 30) break;
        } while (contrast(bg, color) < minContrast);
        return color;
    }

    function RandomStyle() {
        let bg = block.background
            ? colors.background
            : randomBackground(Math.random() < 0.5 ? "dark" : "light");
        let bgType = getBackground(bg);

        let text = block.normal ? colors.normal : getContrastColor(bg, 5);

        const newColors = { ...colors };
        if (!block.background) newColors.background = bg;
        if (!block.normal) newColors.normal = text;

        keys.forEach((key) => {
            if (key !== "background" && key !== "normal" && !block[key]) {
                if (key === "comment") {
                    newColors[key] = bgType === "dark" ? "#888888" : "#666666";
                } else {
                    newColors[key] = getContrastColor(bg, 3);
                }
            }
        });
        return newColors;
    }

    updateCSS(colors);
    updateBlock();

    form.addEventListener("input", (e) => {
        if (e.target.type === "color") {
            colors[e.target.name] = e.target.value;
            updateCSS(colors);
        }
    });

    styleSelect.addEventListener("change", (e) => {
        const selected = e.target.value;
        Object.assign(colors, styles[selected]);
        currentStyle = selected;
        updateColor();
        updateCSS(colors);
    });

    copy.addEventListener("click", () => {
        const css = generateCSS(colors, currentStyle);
        navigator.clipboard.writeText(css).then(() => {
            copy.textContent = "Copied!";
            setTimeout(() => (copy.textContent = "Copy CSS"), 1200);
        });
    });

    random.addEventListener("click", () => {
        const randomStyle = RandomStyle();
        Object.assign(colors, randomStyle);
        updateColor();
        updateCSS(colors);
    });
</script>

<style>
    :global(body) {
        background: #f5f5f5;
    }

    .container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 2rem 2rem 1.5rem 2rem;
        font-family: system-ui, sans-serif;
        display: flex;
        flex-direction: row;
        gap: 8rem;
        align-items: flex-start;
        justify-content: center;
    }

    .container form {
        flex: 1 1 0;
        min-width: 320px;
        max-width: 450px;
    }

    .container .preview {
        flex: 1 1 0;
        min-width: 320px;
        max-width: 550px;
    }

    .select {
        display: flex;
        align-items: center;
        gap: 0.7rem;
        margin-bottom: 1.2rem;
    }

    .select label {
        font-size: 1rem;
        color: #444;
    }

    .select select {
        font-size: 1rem;
        padding: 0.2rem 0.6rem;
        border-radius: 6px;
        border: 1px solid #ddd;
        background: #f7f7f7;
        cursor: pointer;
    }

    .color-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 0.7rem 1.5rem;
        margin-bottom: 2rem;
    }

    .block-btn {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 1.2em;
        display: flex;
        align-items: center;
        padding: 0;
    }

    .color-label {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 0.5rem;
        font-size: 0.95rem;
        background: #f7f7f7;
        border-radius: 8px;
        padding: 0.5rem 0.5rem;
        transition: background 0.2s;
    }

    .color-label:hover {
        background: #ececec;
    }

    .color-label span {
        text-transform: capitalize;
        color: #444;
        letter-spacing: 0.01em;
    }

    .color-label input[type="color"] {
        border: none;
        background: none;
        width: 2rem;
        height: 2rem;
        cursor: pointer;
        padding: 0;
    }

    .preview h3 {
        font-size: 1.08rem;
        font-weight: 500;
        margin-bottom: 0.7rem;
        color: #23241f;
    }

    .preview pre {
        background: var(--code-background, #23241f);
        color: var(--code-normal, #f8f8f2);
        padding: 1.2em 1em;
        border-radius: 10px;
        font-size: var(--code-size, 13px);
        font-family: "Fira Mono", monospace;
        white-space: var(--code-white-space, pre-wrap);
        overflow-x: auto;
        margin: 0;
        box-shadow: 0 1px 6px 0 rgba(0, 0, 0, 0.04);
    }

    .token.operator {
        color: var(--code-operator, #f8f8f2);
    }
    .token.comment {
        color: var(--code-comment, #75715e);
    }
    .token.function {
        color: var(--code-function, #a6e22e);
    }
    .token.keyword {
        color: var(--code-keyword, #f92672);
    }
    .token.string {
        color: var(--code-string, #e6db74);
    }
    .token.console {
        color: var(--code-console, #e6db74);
    }
    .token.property {
        color: var(--code-property, #a6e22e);
    }
    .token.selector {
        color: var(--code-selector, #f92672);
    }
    .token.value {
        color: var(--code-value, #ae81ff);
    }
    .token.important {
        color: var(--code-important, #cb4b16);
    }
    .token.boolean {
        color: var(--code-boolean, #ae81ff);
    }
    .token.punctuation {
        color: var(--code-punctuation, #f8f8f2);
    }

    .button {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-size: 0.97rem;
        padding: 0.35rem 0.9rem;
        border-radius: 7px;
        border: 1px solid #ddd;
        background: #f7f7f7;
        cursor: pointer;
        transition:
            background 0.18s,
            border 0.18s;
        margin-top: 0.5rem;
        margin-bottom: 0.5rem;
        box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.03);
        outline: none;
    }
    .button + .button {
        margin-left: 0.5rem;
    }
    .button:hover,
    .button:focus {
        background: #ececec;
        border-color: #bbb;
        color: #222;
    }
</style>
